operation:"-","accSub",left:Member(MemberExpr { span: 477334..477372, obj: Paren(ParenExpr { span: 477334..477365, expr: Bin(BinExpr { span: 477335..477364, op: "||", left: Member(MemberExpr { span: 477335..477358, obj: Call(CallExpr { span: 477335..477355, ctxt: #0, callee: Expr(Member(MemberExpr { span: 477335..477350, obj: Member(MemberExpr { span: 477335..477344, obj: Ident(Ident { span: 477335..477341, ctxt: #5, sym: "eSplit", optional: false }), prop: Computed(ComputedPropName { span: 477341..477344, expr: Lit(Num(Number { span: 477342..477343, value: 0.0, raw: Some("0") })) }) }), prop: Ident(IdentName { span: 477345..477350, sym: "split" }) })), args: [ExprOrSpread { spread: None, expr: Lit(Str(Str { span: 477351..477354, value: ".", raw: Some("'.'") })) }], type_args: None }), prop: Computed(ComputedPropName { span: 477355..477358, expr: Lit(Num(Number { span: 477356..477357, value: 1.0, raw: Some("1") })) }) }), right: Lit(Str(Str { span: 477362..477364, value: "", raw: Some("''") })) }) }), prop: Ident(IdentName { span: 477366..477372, sym: "length" }) }),right:Paren(ParenExpr { span: 477375..477394, expr: Unary(UnaryExpr { span: 477376..477393, op: "+", arg: Paren(ParenExpr { span: 477377..477393, expr: Bin(BinExpr { span: 477378..477392, op: "||", left: Member(MemberExpr { span: 477378..477387, obj: Ident(Ident { span: 477378..477384, ctxt: #5, sym: "eSplit", optional: false }), prop: Computed(ComputedPropName { span: 477384..477387, expr: Lit(Num(Number { span: 477385..477386, value: 1.0, raw: Some("1") })) }) }), right: Lit(Num(Number { span: 477391..477392, value: 0.0, raw: Some("0") })) }) }) }) })
start:477334,end:477394
operation:"*","accMul",left:Ident(Ident { span: 477777..477780, ctxt: #6, sym: "num", optional: false }),right:Paren(ParenExpr { span: 477783..477795, expr: Bin(BinExpr { span: 477784..477794, op: "**", left: Lit(Num(Number { span: 477784..477786, value: 10.0, raw: Some("10") })), right: Ident(Ident { span: 477790..477794, ctxt: #6, sym: "dLen", optional: false }) }) })
start:477777,end:477795
operation:"-","accSub",left:Ident(Ident { span: 478310..478311, ctxt: #12, sym: "i", optional: false }),right:Lit(Num(Number { span: 478314..478315, value: 2.0, raw: Some("2") }))
start:478310,end:478315
operation:"+","accAdd",left:Call(CallExpr { span: 478561..478578, ctxt: #0, callee: Expr(Ident(Ident { span: 478561..478572, ctxt: #2, sym: "digitLength", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 478573..478577, ctxt: #10, sym: "num1", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 478581..478598, ctxt: #0, callee: Expr(Ident(Ident { span: 478581..478592, ctxt: #2, sym: "digitLength", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 478593..478597, ctxt: #10, sym: "num2", optional: false }) }], type_args: None })
start:478561,end:478598
operation:"*","accMul",left:Ident(Ident { span: 478622..478633, ctxt: #10, sym: "num1Changed", optional: false }),right:Ident(Ident { span: 478636..478647, ctxt: #10, sym: "num2Changed", optional: false })
start:478622,end:478647
operation:"/","accDiv",left:Ident(Ident { span: 478690..478699, ctxt: #10, sym: "leftValue", optional: false }),right:Paren(ParenExpr { span: 478702..478717, expr: Bin(BinExpr { span: 478703..478716, op: "**", left: Lit(Num(Number { span: 478703..478705, value: 10.0, raw: Some("10") })), right: Ident(Ident { span: 478709..478716, ctxt: #10, sym: "baseNum", optional: false }) }) })
start:478690,end:478717
operation:"-","accSub",left:Ident(Ident { span: 478907..478908, ctxt: #17, sym: "i", optional: false }),right:Lit(Num(Number { span: 478911..478912, value: 2.0, raw: Some("2") }))
start:478907,end:478912
operation:"+","accAdd",left:Call(CallExpr { span: 479136..479156, ctxt: #0, callee: Expr(Ident(Ident { span: 479136..479141, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479142..479146, ctxt: #15, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479148..479155, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 479159..479179, ctxt: #0, callee: Expr(Ident(Ident { span: 479159..479164, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479165..479169, ctxt: #15, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479171..479178, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None })
start:479136,end:479179
operation:"/","accDiv",left:Paren(ParenExpr { span: 479135..479180, expr: Call(CallExpr { span: 0..0, ctxt: #0, callee: Expr(Ident(Ident { span: 0..0, ctxt: #0, sym: "accAdd", optional: false })), args: [ExprOrSpread { spread: None, expr: Call(CallExpr { span: 479136..479156, ctxt: #0, callee: Expr(Ident(Ident { span: 479136..479141, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479142..479146, ctxt: #15, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479148..479155, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }) }, ExprOrSpread { spread: None, expr: Call(CallExpr { span: 479159..479179, ctxt: #0, callee: Expr(Ident(Ident { span: 479159..479164, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479165..479169, ctxt: #15, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479171..479178, ctxt: #15, sym: "baseNum", optional: false }) }], type_args: None }) }], type_args: None }) }),right:Ident(Ident { span: 479183..479190, ctxt: #15, sym: "baseNum", optional: false })
start:479135,end:479190
operation:"-","accSub",left:Ident(Ident { span: 479381..479382, ctxt: #22, sym: "i", optional: false }),right:Lit(Num(Number { span: 479385..479386, value: 2.0, raw: Some("2") }))
start:479381,end:479386
operation:"-","accSub",left:Call(CallExpr { span: 479612..479632, ctxt: #0, callee: Expr(Ident(Ident { span: 479612..479617, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479618..479622, ctxt: #20, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479624..479631, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }),right:Call(CallExpr { span: 479635..479655, ctxt: #0, callee: Expr(Ident(Ident { span: 479635..479640, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479641..479645, ctxt: #20, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479647..479654, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None })
start:479612,end:479655
operation:"/","accDiv",left:Paren(ParenExpr { span: 479611..479656, expr: Call(CallExpr { span: 0..0, ctxt: #0, callee: Expr(Ident(Ident { span: 0..0, ctxt: #0, sym: "accSub", optional: false })), args: [ExprOrSpread { spread: None, expr: Call(CallExpr { span: 479612..479632, ctxt: #0, callee: Expr(Ident(Ident { span: 479612..479617, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479618..479622, ctxt: #20, sym: "num1", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479624..479631, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }) }, ExprOrSpread { spread: None, expr: Call(CallExpr { span: 479635..479655, ctxt: #0, callee: Expr(Ident(Ident { span: 479635..479640, ctxt: #2, sym: "times", optional: false })), args: [ExprOrSpread { spread: None, expr: Ident(Ident { span: 479641..479645, ctxt: #20, sym: "num2", optional: false }) }, ExprOrSpread { spread: None, expr: Ident(Ident { span: 479647..479654, ctxt: #20, sym: "baseNum", optional: false }) }], type_args: None }) }], type_args: None }) }),right:Ident(Ident { span: 479659..479666, ctxt: #20, sym: "baseNum", optional: false })
start:479611,end:479666
operation:"-","accSub",left:Ident(Ident { span: 479858..479859, ctxt: #27, sym: "i", optional: false }),right:Lit(Num(Number { span: 479862..479863, value: 2.0, raw: Some("2") }))
start:479858,end:479863